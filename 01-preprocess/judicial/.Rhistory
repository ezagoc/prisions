tij_T_beta = rep(m2$coefficients[5], 6)
)
# Compute treatment conditions effects
treat.cond <- treat.cond |>
mutate(effect = Tc*Tc_beta + Tea*T_beta + T_5km*tij_beta
+ T_5km*Tea*tij_T_beta,
prop_effect = effect*Prop)
predicted <- sum(treat.cond$prop_effect)
# Build the data set:
treat.cond <- tibble(
Tc = c(1, 1, 1, 1, 1, 1),
Tea = c(1, 1, 1, 0, 0, 0),
T_5km = c(2, 1, 0, 2, 1, 0),
Prop = c(0.10, 0.15, 0.15, 0.20, 0.30, 0.10),
Tc_beta = rep(m2$coefficients[1], 6),
T_beta = rep(m2$coefficients[2], 6),
tij_beta = rep(m2$coefficients[3], 6),
tij_T_beta = rep(m2$coefficients[5], 6)
)
# Compute treatment conditions effects
treat.cond <- treat.cond |>
mutate(effect = Tc*Tc_beta + Tea*T_beta + T_5km*tij_beta
+ T_5km*Tea*tij_T_beta,
prop_effect = effect*Prop)
predicted <- round(sum(treat.cond$prop_effect), 2)
m3$coefficients
m3$coefficients[7]
# Build the data set:
treat.cond <- tibble(
Tc = c(1, 1, 1, 1, 1, 1),
Tea = c(1, 1, 1, 0, 0, 0),
T_5km = c(2, 1, 0, 2, 1, 0),
Prop = c(0.10, 0.15, 0.15, 0.20, 0.30, 0.10),
Tc_beta = rep(m3$coefficients[1], 6),
T_beta = rep(m3$coefficients[2], 6),
tij_beta = rep(m3$coefficients[3], 6),
tij_T_beta = rep(m3$coefficients[7], 6)
)
# Compute treatment conditions effects
treat.cond <- treat.cond |>
mutate(effect = Tc*Tc_beta + Tea*T_beta + T_5km*tij_beta
+ T_5km*Tea*tij_T_beta,
prop_effect = effect*Prop)
predicted2 <- round(sum(treat.cond$prop_effect), 2)
pacman::p_load(tidyverse, arrow)
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
pacman::p_load(tidyverse, arrow, foreign)
preg <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/preg2009.DBF'))
pf <- '../../../data/01-judicial/00-sentencing/raw/Judiciales_BD_Catalogos_2009_dbf/'
# First read sreg and pdel
preg <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/preg2009.DBF'))
View(preg)
sreg <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/sreg2009.DBF'))
View(sreg)
preg.na <- preg |> mutate(across(c(B_MESREG:B_MULTA), ~as.numeric(.x)))
preg.na <- preg |> mutate(across(c(B_MESREG:B_TOTDEL), ~as.numeric(.x)))
View(preg.na)
entidad <-  read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CENTIDAD.DBF'))
View(entidad)
# Check for NAs on relevant variables: sentence, mun_rh, st_rh, date sentence.
# From CENTIDAD.dbf we know: if state > 32 then it is NA (other countries, NA)
preg.na <- preg |> mutate(across(c(B_MESREG:B_TOTDEL), ~as.numeric(.x))) |> filter(B_ENTH>32)
# Check for NAs on relevant variables: sentence, mun_rh, st_rh, date sentence.
# From CENTIDAD.dbf we know: if state > 32 then it is NA (other countries, NA)
preg.na <- preg |> mutate(across(c(B_MESREG:B_TOTDEL), ~as.numeric(.x))) |> filter(B_ENTRH>32)
# Check for NAs on relevant variables: sentence, mun_rh, st_rh, date sentence.
# From CENTIDAD.dbf we know: if state > 32 then it is NA (other countries, NA)
preg.na <- preg |> mutate(across(c(B_MESREG:B_TOTDEL), ~as.numeric(.x))) |> filter(B_ENTRH<32)
View(preg.na)
# check total number of different code inegis (residence)
preg.unique <- preg.na |> mutate(code_inegi_rh = B_ENTRH*1000+B_MUNRH) |>
distinct(code_inegi_rh)
View(preg.unique)
View(preg)
View(sreg)
preg.auto <- preg |> filter(is.na(B_FAUTO) == F)
View(preg)
pdel <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/pdel2009.DBF'))
View(pdel)
View(pdel)
pdel.c <- pdel |> filter(IMPORTANTE == F)
pdel.c <- pdel |> filter(IMPORTANTE == T)
pdel.c <- pdel |> filter(IMPORTANTE == T)
View(entidad)
View(pdel)
# Pivot wider:
pdel.w <- pdel |>
pivot_wider(
id_cols = c(id_ps),
names_from = B_NUMDEL,
values_from = count,
values_fill = 0
)
# Pivot wider:
pdel.w <- pdel |>
pivot_wider(
id_cols = c(id_ps),
names_from = B_NUMDEL,
values_from = B_DELITO,
values_fill = 0
)
# Pivot wider:
pdel.w <- pdel |>
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO,
values_fill = 0
)
# Pivot wider:
pdel.w <- pdel |>
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
)
View(pdel.w)
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
)
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
)
View(pdel)
# Pivot wider:
pdel.w <- pdel |> mutate(B_NUMDEL = paste0('crime_', B_NUMDEL)) |>
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
)
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> mutate(B_NUMDEL = paste0('crime_', B_NUMDEL)) |>
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
) |> filter(is.na(crime_36) == F)
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_NUMDEL, .keep_all = T) |>
mutate(B_NUMDEL = paste0('crime_', B_NUMDEL)) |>
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
)
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_NUMDEL, B_DELITO, .keep_all = T) |>
mutate(B_NUMDEL = paste0('crime_', B_NUMDEL)) |>
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
)
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(B_NUMDEL = paste0('crime_', B_NUMDEL)) |>
pivot_wider(
id_cols = c(ID_PS),
names_from = B_NUMDEL,
values_from = B_DELITO
)
View(pdel.w)
pdel.wd |> pdel.w |> filter(is.na(crime_9) == F)
pdel.wd <- pdel.w |> filter(is.na(crime_9) == F)
View(pdel.wd)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'))
View(del)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF')) |>
mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "ó") %>%
str_replace_all("<b4>", "ñ") %>%
str_replace_all("<e1>", "á") %>%
str_replace_all("<e9>", "é") %>%
str_replace_all("<ed>", "í") %>%
str_replace_all("<fa>", "ú")
)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF')) |>
mutate(DESC_DEL = iconv(DESC_DEL, from = "latin1", to = "UTF-8"))
View(del)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF')) |>
mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "ó") %>%
str_replace_all("<b4>", "ñ") %>%
str_replace_all("<e1>", "á") %>%
str_replace_all("<e9>", "é") %>%
str_replace_all("<ed>", "í") %>%
str_replace_all("<fa>", "ú")
) |>
mutate(DESC_DEL = iconv(DESC_DEL, from = "latin1", to = "UTF-8"))
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF')) |>
mutate(DESC_DEL = iconv(DESC_DEL, from = "latin1", to = "UTF-8"))
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T) read.dbf("file.dbf", as.is = TRUE)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T)
Encoding(del$DESC_DEL) <- "latin1"
del$DESC_DEL <- iconv(del$DESC_DEL, from = "latin1", to = "UTF-8")
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T)
View(del)
del <- del |> mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "ó") %>%
str_replace_all("<b4>", "ñ") %>%
str_replace_all("<e1>", "á") %>%
str_replace_all("<e9>", "é") %>%
str_replace_all("<ed>", "í") %>%
str_replace_all("<fa>", "ú")
)
pacman::p_load(tidyverse, arrow, foreign)
rm(list = ls())
rstudioapi::getActiveDocumentContext
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
preg <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/preg2009.DBF'))
pf <- '../../../data/01-judicial/00-sentencing/raw/Judiciales_BD_Catalogos_2009_dbf/'
# First read sreg, preg, pdel
preg <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/preg2009.DBF'))
sreg <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/sreg2009.DBF'))
pdel <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/pdel2009.DBF'))
# From CENTIDAD.dbf we know: if state > 32 then it is NA (other countries, NA)
entidad <-  read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CENTIDAD.DBF'))
# Check pdel. What to do, first keep the important crime
pdel.c <- pdel |> filter(IMPORTANTE == T)
# Check the delitos codebook:
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T)
del <- del |> mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "ó") %>%
str_replace_all("<b4>", "ñ") %>%
str_replace_all("<e1>", "á") %>%
str_replace_all("<e9>", "é") %>%
str_replace_all("<ed>", "í") %>%
str_replace_all("<fa>", "ú")
)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2008/CDEL2008.DBF'), as.is = T)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2008/CDEL2008.DBF'))
pf <- '../../../data/01-judicial/00-sentencing/raw/Judiciales_BD_Catalogos_2008_dbf/'
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2008/CDEL2008.DBF'))
View(del)
pf <- '../../../data/01-judicial/00-sentencing/raw/Judiciales_BD_Catalogos_2010_dbf/'
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2010/CDEL2010.DBF'))
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'))
pf <- '../../../data/01-judicial/00-sentencing/raw/Judiciales_BD_Catalogos_2009_dbf/'
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'))
del <- del |> mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "o") %>%
str_replace_all("<b4>", "n") %>%
str_replace_all("<e1>", "a") %>%
str_replace_all("<e9>", "e") %>%
str_replace_all("<ed>", "i") %>%
str_replace_all("<fa>", "u")
)
View(del)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'))
View(del)
del <- del |> mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "o") %>%
str_replace_all("<a4>", "n") %>%
str_replace_all("<e1>", "a") %>%
str_replace_all("<e9>", "e") %>%
str_replace_all("<ed>", "i") %>%
str_replace_all("<fa>", "u")
)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'))
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T)
del <- del |> mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "o") %>%
str_replace_all("<a4>", "n") %>%
str_replace_all("<e1>", "a") %>%
str_replace_all("<e9>", "e") %>%
str_replace_all("<ed>", "i") %>%
str_replace_all("<fa>", "u")
)
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T)
Encoding(del$DESC_DEL) <- "latin1"
del$DESC_DEL <- iconv(del$DESC_DEL, from = "latin1", to = "UTF-8")
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T)
Encoding(del$DESC_DEL) <- "latin1"
del <- read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CDEL2009.DBF'), as.is = T)
del <- del |> mutate(
DESC_DEL = DESC_DEL %>%
str_replace_all("<a2>", "o") %>%
str_replace_all("<a4>", "n") %>%
str_replace_all("<e1>", "a") %>%
str_replace_all("<e9>", "e") %>%
str_replace_all("<ed>", "i") %>%
str_replace_all("<fa>", "u")
)
del$DESC_DEL <- iconv(del$DESC_DEL, from = "latin1", to = "UTF-8")
View(sreg)
munpan <- read_parquet('../../../data/00-map/municipalities.parquet')
View(munpan)
coded <- readxl::read_excel(paste0('CatalogosMicrodatos_2009/CDEL2009_coded.xlsx'))
coded <- readxl::read_excel(paste0(pf,
'CatalogosMicrodatos_2009/CDEL2009_coded.xlsx'))
View(coded)
View(coded)
coded <- readxl::read_excel(paste0(pf,
'CatalogosMicrodatos_2009/CDEL2009_coded.xlsx')) |>
rename(CVE_DEL = B_DELITO)
coded <- readxl::read_excel(paste0(pf,
'CatalogosMicrodatos_2009/CDEL2009_coded.xlsx')) |>
rename(B_DELITO = CVE_DEL)
pdel <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/pdel2009.DBF'), as.is = T)
pdel <- pdel |> left_join(coded, by = c('B_delito'))
pdel <- pdel |> left_join(coded, by = c('B_DELITO'))
View(pdel)
pdel <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/pdel2009.DBF'), as.is = T)
pdel <- pdel |> left_join(coded, by = c('B_DELITO'))
View(pdel)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(code_snieg = paste0('crime_', code_snieg)) |>
pivot_wider(
id_cols = c(ID_PS),
names_from = code_snieg,
values_from = code_snieg,
values_fill = 0
)
View(coded)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(snieg_code = paste0('crime_', snieg_code)) |>
mutate(dummy = 1) %>%  # Create a dummy column
#distinct(id, snieg_code, .keep_all = TRUE) %>%  # Drop duplicate id-crime pairs, if any
pivot_wider(
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
View(pdel.w)
mutate(dummy = 1) %>%  # Create a dummy column
#distinct(id, snieg_code, .keep_all = TRUE) %>%  # Drop duplicate id-crime pairs, if any
pivot_wider(
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) |>
mutate(dummy = 1) %>%  # Create a dummy column
#distinct(id, snieg_code, .keep_all = TRUE) %>%  # Drop duplicate id-crime pairs, if any
pivot_wider(
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) |>
mutate(dummy = 1) %>%  # Create a dummy column
#distinct(id, snieg_code, .keep_all = TRUE) %>%  # Drop duplicate id-crime pairs, if any
pivot_wider(
id_cols = ID_PS,
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) #|>
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) #|>
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(snieg_code = paste0('crime_', snieg_code)) #|>
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup() |>
mutate(snieg_code = paste0('crime_', snieg_code)) |> arrange(ID_PS)
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup()
View(pdel.w)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup()|> arrange(ID_PS)
View(pdel.w)
pdel.w <- pdel.w |> mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) |>
mutate(dummy = 1)
View(pdel.w)
pdel.w2 <- pdel.w |> distinct(ID_PS, snieg_code) |> pivot_wider(
id_cols = ID_PS,
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
pdel.w <- pdel.w |> mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) |>
mutate(dummy = 1)
View(pdel.w)
pdel.w2 <- pdel.w |> distinct(ID_PS, snieg_code, .keep_all = T) |> pivot_wider(
id_cols = ID_PS,
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
View(pdel.w2)
View(pdel)
pdel <- pdel |> left_join(coded, by = c('B_DELITO')) |> arrange(ID_PS)
pdel <- pdel |> left_join(coded, by = c('B_DELITO')) |> arrange(ID_PS)
pdel.ind <- pdel |> filter(IMPORTANTE == T)
View(pdel.ind)
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup()|> arrange(ID_PS)
pdel.w <- pdel.w |> mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) |>
mutate(dummy = 1)
pdel.w <- pdel.w |> distinct(ID_PS, snieg_code, .keep_all = T) |> pivot_wider(
id_cols = ID_PS,
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
View(pdel.w)
pdel.ind <- pdel.ind |> left_join(pdel.w, by = ('ID_PS'))
View(pdel.ind)
pdel <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/pdel2009.DBF'), as.is = T)
entidad <-  read.dbf(paste0(pf, 'CatalogosMicrodatos_2009/CENTIDAD.DBF'))
# Check pdel. What to do, first keep the important crime
# Matches the length of the other data set (processed one)
# It matches the preg data set: However, we do not want to lose info on these crimes.
# Lets keep the important one as crime_1_id, and the others as crime_1_id
# Import coded crimes
coded <- readxl::read_excel(paste0(pf,
'CatalogosMicrodatos_2009/CDEL2009_coded.xlsx')) |>
rename(B_DELITO = CVE_DEL)
# We take all the data from the important crime, that is our deduplicated dataset by year
pdel <- pdel |> left_join(coded, by = c('B_DELITO')) |> arrange(ID_PS)
pdel.ind <- pdel |> filter(IMPORTANTE == T)
# Pivot wider:
pdel.w <- pdel |> distinct(ID_PS, B_DELITO, .keep_all = T) |> group_by(ID_PS) |>
mutate(B_NUMDEL = row_number()) |> ungroup()|> arrange(ID_PS)
pdel.w <- pdel.w |> mutate(snieg_code = paste0('crime_', snieg_code)) |>
select(ID_PS, snieg_code) |>
mutate(dummy = 1)
pdel.w <- pdel.w |> distinct(ID_PS, snieg_code, .keep_all = T) |> pivot_wider(
id_cols = ID_PS,
names_from = snieg_code,
values_from = dummy,
values_fill = 0
)
View(pdel.ind)
pdel.ind <- pdel.ind |> left_join(pdel.w, by = ('ID_PS'))
View(pdel.ind)
pdel.ind <- pdel.ind |>
mutate(date_ocu = dmy(B_FOCU),         # Convert to Date format
day_ocu = day(date),
month_ocu = month(date),
year_ocu = year(date),
CVE_ENT_ocu = ifelse(B_ENTOC != '99', as.numeric(B_ENTOC), NA),
CVE_MUN_ocu = ifelse(B_MUNOC != '999', as.numeric(B_MUNOC), NA),
code_inegi_ocu = CVE_ENT_ocu*1000 + CVE_MUN_ocu,
prison_immed = ifelse(B_AUTO == 1, 1, 0),
juicio = ifelse(B_AUTO == 2, 1, 0),
preventive = ifelse(B_AUTO == 5, 1, 0),
free = ifelse(B_AUTO %in% c(4, 6, 0), 1, 0),
petty = ifelse(B_CALIFICA == 2, 1, 0),
federal_imp = ifelse(B_FUERO == 2, 1, 0))
pdel.ind <- pdel.ind |>
mutate(date_ocu = dmy(B_FOCU))
pdel.ind <- pdel.ind |>
mutate(date_ocu = dmy(B_FOCU),         # Convert to Date format
day_ocu = day(date_ocu),
month_ocu = month(date_ocu),
year_ocu = year(date_ocu),
CVE_ENT_ocu = ifelse(B_ENTOC != '99', as.numeric(B_ENTOC), NA),
CVE_MUN_ocu = ifelse(B_MUNOC != '999', as.numeric(B_MUNOC), NA),
code_inegi_ocu = CVE_ENT_ocu*1000 + CVE_MUN_ocu,
prison_immed = ifelse(B_AUTO == 1, 1, 0),
juicio = ifelse(B_AUTO == 2, 1, 0),
preventive = ifelse(B_AUTO == 5, 1, 0),
free = ifelse(B_AUTO %in% c(4, 6, 0), 1, 0),
petty = ifelse(B_CALIFICA == 2, 1, 0),
federal_imp = ifelse(B_FUERO == 2, 1, 0))
View(preg)
pdel.ind <- pdel.ind |> select(ID_PS, code_delito = B_DELITO, DESC_DEL:federal_imp)
preg <- read.dbf(paste0(pf, 'TablasMicrodatos_2009/preg2009.DBF'), as.is = T)
preg <- preg |> mutate(across(c(B_MESREG:B_TOTDEL), ~as.numeric(.x))) |>
filter(B_ENTRH<32)
View(preg)
